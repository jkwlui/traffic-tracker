{"name":"Traffic-tracker","tagline":"An API to turn GPS traces into useful road speed data ","body":"# Traffic Tracker\r\n\r\nBuilt to support humanitarian efforts in Nepal, this app collects and aggregates traffic data from GPS traces to easily visualize traffic speed pattern across cities.\r\n\r\n### Run locally\r\n\r\n##### Install Node dependencies\r\n```shell\r\n$  npm install\r\n```\r\n\r\n##### Set up API keys\r\nThis application uses the [TrackMatching API](https://mapmatching.3scale.net/) to snap GPS coordinates onto roads. You need to get a free API key from their [website](https://mapmatching.3scale.net/login) in order for it to work. Place your App ID and App Key in a file named `config.json` at the root of the project like so:\r\n```json\r\n{\r\n  \"keys\": {\r\n    \"TRACK_MATCHING\": {\r\n      \"APP_ID\": \"YOUR_APP_ID_HERE\",\r\n      \"APP_KEY\": \"YOUR_APP_KEY_HERE\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n##### Start server\r\n```shell\r\n$  npm start\r\n```\r\nServer is running at `http://localhost:3000`\r\n\r\n## Upload GPS traces\r\n\r\n#### Endpoint ` POST /trip `\r\n\r\nInclude a `trip` JSON object in the request body:\r\n\r\n```javascript\r\n{\r\n  \"trip\": {\r\n    \"geopoints\": [\r\n      {\r\n        \"lat\": 49.165843,\r\n        \"lon\": -123.107281,\r\n        \"time\": \"Tue Jun 09 2015 11:31:53 GMT-0700 (PDT)\" // JS Date String\r\n      },\r\n      \r\n      ...\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nServer returns a  `200` status code immediately on success, while the request is processed in the background.\r\n\r\n## Getting traffic speeds\r\n\r\n#### Endpoint ` GET /visualize `\r\n\r\nThe `visualize` endpoint gets all speed data from the server using no params. The result is a JSON object:\r\n\r\n```javascript\r\n{\r\n  \"status\": \"success\",\r\n  \"segments\": [\r\n    {\r\n      \"_id\": \"557619b42bba3087b53e5053\",\r\n      \"aNode\": 97998243,\r\n      \"bNode\": 553101333,\r\n      \"way\": 74366445,\r\n      \"__v\": 0,\r\n      \"speeds\": [\r\n        4.319808545526469\r\n      ]\r\n    },\r\n    {\r\n      \"_id\": \"557619b42bba3087b53e5054\",\r\n      \"aNode\": 253491085,\r\n      \"bNode\": 553101333,\r\n      \"way\": 74366445,\r\n      \"__v\": 0,\r\n      \"speeds\": [\r\n        4.319808545526469\r\n      ]\r\n    }\r\n  ],\r\n  \"nodes\": {\r\n    \"97998243\": {\r\n      \"_id\": 97998243,\r\n      \"location\": [\r\n        -123.122786,\r\n        49.2832809\r\n      ],\r\n      \"__v\": 0\r\n    },\r\n    \"253491085\": {\r\n      \"_id\": 253491085,\r\n      \"location\": [\r\n        -123.1217731,\r\n        49.2826492\r\n      ],\r\n      \"__v\": 0\r\n    },\r\n    \"553101333\": {\r\n      \"_id\": 553101333,\r\n      \"location\": [\r\n        -123.1222277,\r\n        49.2829285\r\n      ],\r\n      \"__v\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n##### Node\r\n\r\nNodes are points on a map.\r\n\r\n`_id` references [OSM node IDs](http://wiki.openstreetmap.org/wiki/Node)\r\n\r\n`location` are in [GeoJSON](http://geojson.org) format: `\"location\": [lng, lat]`\r\n\r\n##### Segment\r\n\r\nSegments are a roadway between two nodes on an [OSM way](http://wiki.openstreetmap.org/wiki/Way)\r\n\r\n`aNode` and `bNode` always refers to a node in `nodes`.\r\n\r\n`aNode` ID is by design smaller than `bNode` to avoid duplicate Segment entries in the database.\r\n\r\nNote: While `segments` is an array, `nodes` is a hash with keys that reference to its OSM node IDs for quick searching.\r\n\r\n#### Endpoint `GET /visualize/bbox`\r\n\r\nSpecify a bounding box in the query string of the GET request to return only segments covered by the box.\r\n\r\n##### Example\r\n\r\n```shell\r\n$  CURL \"/visualize/bbox/?sw_lat=49.195&sw_lon=-123.27&ne_lat=49.315&ne_lon=-123.020\"\r\n```\r\n\r\nResponse is in same format as the `GET /visualize` endpoint.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}